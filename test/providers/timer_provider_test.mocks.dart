// Mocks generated by Mockito 5.4.4 from annotations
// in time_trapp/test/providers/timer_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:time_trapp/models/app_settings.dart' as _i2;
import 'package:time_trapp/models/task_session.dart' as _i5;
import 'package:time_trapp/models/webhook_config.dart' as _i6;
import 'package:time_trapp/providers/timer_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppSettings_0 extends _i1.SmartFake implements _i2.AppSettings {
  _FakeAppSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStorageService extends _i1.Mock implements _i3.IStorageService {
  MockIStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveCurrentSession(_i5.TaskSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addSession(_i5.TaskSession? session) => (super.noSuchMethod(
        Invocation.method(
          #addSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSession(_i5.TaskSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveSettings(_i2.AppSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [settings],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.TaskSession>> loadSessions() => (super.noSuchMethod(
        Invocation.method(
          #loadSessions,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.TaskSession>>.value(<_i5.TaskSession>[]),
      ) as _i4.Future<List<_i5.TaskSession>>);

  @override
  _i4.Future<_i5.TaskSession?> loadCurrentSession() => (super.noSuchMethod(
        Invocation.method(
          #loadCurrentSession,
          [],
        ),
        returnValue: _i4.Future<_i5.TaskSession?>.value(),
      ) as _i4.Future<_i5.TaskSession?>);

  @override
  _i4.Future<_i2.AppSettings> loadSettings() => (super.noSuchMethod(
        Invocation.method(
          #loadSettings,
          [],
        ),
        returnValue: _i4.Future<_i2.AppSettings>.value(_FakeAppSettings_0(
          this,
          Invocation.method(
            #loadSettings,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AppSettings>);
}

/// A class which mocks [IWebhookService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWebhookService extends _i1.Mock implements _i3.IWebhookService {
  MockIWebhookService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> sendSessionStartWebhook(
    _i5.TaskSession? session,
    _i6.WebhookConfig? config, {
    String? userName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSessionStartWebhook,
          [
            session,
            config,
          ],
          {#userName: userName},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendSessionStopWebhook(
    _i5.TaskSession? session,
    _i6.WebhookConfig? config, {
    String? userName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSessionStopWebhook,
          [
            session,
            config,
          ],
          {#userName: userName},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
